'use strict';

var isNode = typeof module !== 'undefined' && module.exports && typeof window === 'undefined';
var React = isNode ? require('react/addons') : window.React;

var TodoItem = React.createClass({
  displayName: 'TodoItem',

  render: function render() {

    return React.createElement(
      'div',
      null,
      'todo item: ',
      this.props.todo
    );
  }
});

var TodoList = React.createClass({
  displayName: 'TodoList',

  render: function render() {
    var todoNodes = this.props.data.map(function (comment) {
      return React.createElement(TodoItem, { todo: comment });
    });
    return React.createElement(
      'div',
      { className: 'commentList' },
      todoNodes
    );
  }
});

var TodoApp = React.createClass({
  displayName: 'TodoApp',

  getInitialState: function getInitialState() {
    return { text: '' };
  },
  componentDidMount: function componentDidMount() {
    console.log('component mounted');
  },
  addTodo: function addTodo(e) {
    e.preventDefault();
    this.props.data.push(this.state.text);
    this.setState({ 'text': '' });
  },
  onChange: function onChange(e) {
    this.setState({ text: e.target.value });
  },
  render: function render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h4',
        null,
        'Todo App heading ',
        this.props.data.join('-')
      ),
      React.createElement(TodoList, { data: this.props.data }),
      React.createElement('input', { type: 'text', value: this.state.text, onChange: this.onChange }),
      React.createElement(
        'button',
        { onClick: this.addTodo },
        'add todo'
      )
    );
  }
});

if (isNode) {
  module.exports.todoApp = TodoApp;
} else {
  var mountNode = document.getElementById('react-main-mount');
  var data = ['item1', 'item2'];
  React.render(React.createElement(TodoApp, { data: data }), mountNode);
}
//# sourceMappingURL=data:application/json;base64,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QztDQUNqRCIsImZpbGUiOiJ0b2RvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG52YXIgaXNOb2RlID0gdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgXHJcbiAgJiYgbW9kdWxlLmV4cG9ydHMgXHJcbiAgJiYgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XHJcbnZhciBSZWFjdCA9IGlzTm9kZSA/IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpIDogd2luZG93LlJlYWN0O1xyXG5cclxudmFyIFRvZG9JdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICBcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgdG9kbyBpdGVtOiB7dGhpcy5wcm9wcy50b2RvfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59KTtcclxuXHJcbnZhciBUb2RvTGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHRvZG9Ob2RlcyA9IHRoaXMucHJvcHMuZGF0YS5tYXAoZnVuY3Rpb24gKGNvbW1lbnQpIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8VG9kb0l0ZW0gdG9kbz17Y29tbWVudH0vPlxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1lbnRMaXN0XCI+XHJcbiAgICAgICAge3RvZG9Ob2Rlc31cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufSk7XHJcblxyXG52YXIgVG9kb0FwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHt0ZXh0OicnfTtcclxuICB9LFxyXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnY29tcG9uZW50IG1vdW50ZWQnKTtcclxuICB9LFxyXG4gIGFkZFRvZG86IGZ1bmN0aW9uKGUpIHtcclxuICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB0aGlzLnByb3BzLmRhdGEucHVzaCh0aGlzLnN0YXRlLnRleHQpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7J3RleHQnOicnfSk7XHJcbiAgfSxcclxuICBvbkNoYW5nZTogZnVuY3Rpb24oZSkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7dGV4dDogZS50YXJnZXQudmFsdWV9KTtcclxuICB9LFxyXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8aDQ+VG9kbyBBcHAgaGVhZGluZyB7dGhpcy5wcm9wcy5kYXRhLmpvaW4oJy0nKX08L2g0PlxyXG4gICAgICAgIDxUb2RvTGlzdCBkYXRhPXt0aGlzLnByb3BzLmRhdGF9IC8+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMuc3RhdGUudGV4dH0gb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9PjwvaW5wdXQ+XHJcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmFkZFRvZG99PmFkZCB0b2RvPC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn0pO1xyXG5cclxuaWYoaXNOb2RlKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMudG9kb0FwcCA9IFRvZG9BcHA7XHJcbn1cclxuZWxzZSB7XHJcbiAgdmFyIG1vdW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVhY3QtbWFpbi1tb3VudFwiKTtcclxuICB2YXIgZGF0YSA9IFsnaXRlbTEnLCAnaXRlbTInXTtcclxuICBSZWFjdC5yZW5kZXIoPFRvZG9BcHAgZGF0YT17ZGF0YX0vPiwgbW91bnROb2RlKTtcclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==